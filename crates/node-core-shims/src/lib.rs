use std::collections::HashMap;

#[derive(Clone)]
pub enum NodeBuiltin {
    Stub,
    Package(String),
}

pub fn get_builtin_mapping() -> HashMap<String, NodeBuiltin> {
    [
        ("async_hooks".to_string(), NodeBuiltin::Stub),
        ("assert".to_string(), NodeBuiltin::Package("assert/".to_string())),
        ("buffer".to_string(), NodeBuiltin::Package("buffer/".to_string())),
        ("child_process".to_string(), NodeBuiltin::Stub),
        ("console".to_string(), NodeBuiltin::Package("console-browserify".to_string())),
        ("crypto".to_string(), NodeBuiltin::Package("crypto-browserify".to_string())),
        ("cluster".to_string(), NodeBuiltin::Stub),
        ("dgram".to_string(), NodeBuiltin::Stub),
        ("dns".to_string(), NodeBuiltin::Stub),
        ("domain".to_string(), NodeBuiltin::Stub),
        ("events".to_string(), NodeBuiltin::Package("events/".to_string())),
        ("fs".to_string(), NodeBuiltin::Stub),
        ("http".to_string(), NodeBuiltin::Package("stream-http".to_string())),
        ("http2".to_string(), NodeBuiltin::Stub),
        ("https".to_string(), NodeBuiltin::Package("https-browserify".to_string())),
        ("inspector".to_string(), NodeBuiltin::Stub),
        ("module".to_string(), NodeBuiltin::Stub),
        ("net".to_string(), NodeBuiltin::Stub),
        ("os".to_string(), NodeBuiltin::Package("os-browserify".to_string())),
        ("path".to_string(), NodeBuiltin::Package("path-browserify".to_string())),
        ("perf_hooks".to_string(), NodeBuiltin::Stub),
        ("process".to_string(), NodeBuiltin::Package("process/".to_string())),
        ("punycode".to_string(), NodeBuiltin::Stub),
        ("querystring".to_string(), NodeBuiltin::Package("querystring-es3".to_string())),
        ("readline".to_string(), NodeBuiltin::Stub),
        ("repl".to_string(), NodeBuiltin::Stub),
        ("stream".to_string(), NodeBuiltin::Package("stream-browserify".to_string())),
        ("_stream_readable".to_string(), NodeBuiltin::Package("readable-stream/readable".to_string())),
        ("_stream_writable".to_string(), NodeBuiltin::Package("readable-stream/writable".to_string())),
        ("_stream_duplex".to_string(), NodeBuiltin::Package("readable-stream/duplex".to_string())),
        ("_stream_transform".to_string(), NodeBuiltin::Package("readable-stream/transform".to_string())),
        ("_stream_passthrough".to_string(), NodeBuiltin::Package("readable-stream/passthrough".to_string())),
        ("_stream_wrap".to_string(), NodeBuiltin::Stub),
        ("string_decoder".to_string(), NodeBuiltin::Package("string_decoder".to_string())),
        ("sys".to_string(), NodeBuiltin::Package("util/".to_string())),
        ("timers".to_string(), NodeBuiltin::Package("timers-browserify".to_string())),
        ("tls".to_string(), NodeBuiltin::Stub),
        ("trace_events".to_string(), NodeBuiltin::Stub),
        ("tty".to_string(), NodeBuiltin::Package("tty-browserify".to_string())),
        ("url".to_string(), NodeBuiltin::Package("url/".to_string())),
        ("util".to_string(), NodeBuiltin::Package("util/".to_string())),
        ("v8".to_string(), NodeBuiltin::Stub),
        ("vm".to_string(), NodeBuiltin::Package("vm-browserify".to_string())),
        ("zlib".to_string(), NodeBuiltin::Package("browserify-zlib".to_string())),
    ].iter().cloned().collect()
}
